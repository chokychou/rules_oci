load("@aspect_bazel_lib//lib:testing.bzl", "assert_json_matches")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("//oci:defs.bzl", "oci_image", "oci_tarball")
load("//oci/tests:oci_spec_test.bzl", "oci_spec_config_assert")

# buildifier: leave-alone
oci_image(
    name = "image",
    os = "linux",
    architecture = "arm64",
    variant = "v8",
    entrypoint = ["/custom_bin"],
    cmd = [
        "--arg1",
        "--arg2",
    ],
    env = {
        "ENV": "/test",
    },
)

oci_spec_config_assert(
    name = "config_test",
    architecture_eq = "arm64",
    cmd_eq = [
        "--arg1",
        "--arg2",
    ],
    entrypoint_eq = ["/custom_bin"],
    image = ":image",
    os_eq = "linux",
    variant_eq = "v8",
)

container_structure_test(
    name = "test",
    configs = ["test.yaml"],
    image = ":image",
)

repo_tags = [
    "gcr.io/empty_base:latest",
    "two:is_a_company",
    "three:is_a_crowd",  # Used to test support for more than two repo_tags.
]

# Intended to be `bazel run` to load the tarball into a container runtime.
# Produces only an mtree specification as the default output.
oci_tarball(
    name = "tarball",
    image = ":image",
    repo_tags = repo_tags,
)

# Not typically recommended: ask the tarball rule to write the .tar file
# that would have been created when `bazel run`.
filegroup(
    name = "tarball.tar",
    srcs = [":tarball"],
    output_group = "tarball",
)

genrule(
    name = "tar_manifest",
    srcs = [":tarball.tar"],
    outs = ["manifest.json"],
    cmd = "tar -xOf ./$(location :tarball.tar) manifest.json > $@",
)

write_file(
    name = "expected_RepoTags",
    out = "expected_RepoTags.json",
    content = [str(repo_tags)],
)

assert_json_matches(
    name = "check_tags",
    file1 = ":tar_manifest",
    file2 = ":expected_RepoTags",
    filter1 = ".[0].RepoTags",
)
